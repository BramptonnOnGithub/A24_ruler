
PowerCoupleRuler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003fc  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013eb  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df8  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a5  00000000  00000000  00002847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000031ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093a  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cf  00000000  00000000  00003e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000043dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_4>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_5>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ef       	ldi	r30, 0xFC	; 252
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 30       	cpi	r26, 0x0A	; 10
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e0       	ldi	r26, 0x0A	; 10
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  ea:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_5>:

#include "Buttons.h"
#include "UART.h"

//Interrupt sur PORTD (boutons)
ISR(PCINT2_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	// state watchdog is here to make sure the button presses only do the action once per press
	transmitByte(0xF2);
 114:	82 ef       	ldi	r24, 0xF2	; 242
 116:	0e 94 df 01 	call	0x3be	; 0x3be <_Z12transmitByteh>
	uint8_t currentState = PIND & 0xFC; // Read PD2 to PD7
 11a:	89 b1       	in	r24, 0x09	; 9
 11c:	8c 7f       	andi	r24, 0xFC	; 252
	}
	if (pressedPins & (1 << PD7)) {
		buttonReduce(); // PD7 pressed
	}

	lastState = currentState; // Update last state
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_Z10buttonInitv>:

void buttonInit(){
	//Configure pins PD2..7 as input
	DDRD &= ~((1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7));
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	83 70       	andi	r24, 0x03	; 3
 148:	8a b9       	out	0x0a, r24	; 10
	
	//Enable pull-ups
	PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8c 6f       	ori	r24, 0xFC	; 252
 14e:	8b b9       	out	0x0b, r24	; 11

	//Enable pin change interrupts on PCINT[18:23] (PD2 to PD7) on group PCINT2
	PCICR |= (1 << PCIE2);           
 150:	e8 e6       	ldi	r30, 0x68	; 104
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	84 60       	ori	r24, 0x04	; 4
 158:	80 83       	st	Z, r24
	PCMSK2 |= 0xFC;                  // (0xFC = 11111100) for PCINT[18:23]
 15a:	ed e6       	ldi	r30, 0x6D	; 109
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8c 6f       	ori	r24, 0xFC	; 252
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <_Z12displayResetv>:
}
}

void displayReset(){
	//Reset la position du point
	for (int i = 1; i < LENGTH_DATA; i++) {
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	86 30       	cpi	r24, 0x06	; 6
 16c:	91 05       	cpc	r25, r1
 16e:	34 f4       	brge	.+12     	; 0x17c <_Z12displayResetv+0x16>
		transmitData[i] = 0;  // Clear previous data
 170:	fc 01       	movw	r30, r24
 172:	ee 5f       	subi	r30, 0xFE	; 254
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	10 82       	st	Z, r1
}
}

void displayReset(){
	//Reset la position du point
	for (int i = 1; i < LENGTH_DATA; i++) {
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	f7 cf       	rjmp	.-18     	; 0x16a <_Z12displayResetv+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9c e9       	ldi	r25, 0x9C	; 156
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <_Z12displayResetv+0x1a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <_Z12displayResetv+0x20>
 186:	00 00       	nop
		transmitData[i] = 0;  // Clear previous data
	}
	_delay_ms(10);
	DP_position = 2;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <DP_position>
	
	//Pose 0 a chaque afficheur 
	for (int i = 1 ; i<=5 ; i++) transmitData[i] = LED_0;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	86 30       	cpi	r24, 0x06	; 6
 194:	91 05       	cpc	r25, r1
 196:	3c f4       	brge	.+14     	; 0x1a6 <_Z12displayResetv+0x40>
 198:	fc 01       	movw	r30, r24
 19a:	ee 5f       	subi	r30, 0xFE	; 254
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	20 ec       	ldi	r18, 0xC0	; 192
 1a0:	20 83       	st	Z, r18
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	f6 cf       	rjmp	.-20     	; 0x192 <_Z12displayResetv+0x2c>
	//Ajoute le point a la position voulue
	transmitData[DP_position] &= ~DP_MASK;
 1a6:	e2 e0       	ldi	r30, 0x02	; 2
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	82 81       	ldd	r24, Z+2	; 0x02
 1ac:	80 78       	andi	r24, 0x80	; 128
 1ae:	82 83       	std	Z+2, r24	; 0x02
	
	//Transmission des donnees
	USART0_SendBytes(transmitData, LENGTH_DATA);
 1b0:	66 e0       	ldi	r22, 0x06	; 6
 1b2:	cf 01       	movw	r24, r30
 1b4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16USART0_SendBytesPhh>
 1b8:	08 95       	ret

000001ba <_Z11displayInitv>:

uint8_t LEDnumber[10] = {LED_0, LED_1, LED_2, LED_3, LED_4, LED_5, LED_6, LED_7, LED_8, LED_9};

void displayInit(){
	// Set the intensity of the display to the defined value
	USART0_SendBytes(initData, LENGTH_INIT);
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16USART0_SendBytesPhh>
	// set the display to 00.000
	displayReset(); 
 1c4:	0e 94 b3 00 	call	0x166	; 0x166 <_Z12displayResetv>
 1c8:	08 95       	ret

000001ca <_Z11encoderInitv>:
float encoderGetDistance() {
    return (encoderPosition * circumference);
}

void encoderReset() {
    encoderPosition = 0;
 1ca:	8d b1       	in	r24, 0x0d	; 13
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	8d b9       	out	0x0d, r24	; 13
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	87 b9       	out	0x07, r24	; 7
 1d6:	8e b1       	in	r24, 0x0e	; 14
 1d8:	88 60       	ori	r24, 0x08	; 8
 1da:	8e b9       	out	0x0e, r24	; 14
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	84 b1       	in	r24, 0x04	; 4
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	84 b9       	out	0x04, r24	; 4
 1e8:	87 b1       	in	r24, 0x07	; 7
 1ea:	8d 7f       	andi	r24, 0xFD	; 253
 1ec:	87 b9       	out	0x07, r24	; 7
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	88 b1       	in	r24, 0x08	; 8
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	88 b9       	out	0x08, r24	; 8
 1fa:	e8 e6       	ldi	r30, 0x68	; 104
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	81 60       	ori	r24, 0x01	; 1
 202:	80 83       	st	Z, r24
 204:	eb e6       	ldi	r30, 0x6B	; 107
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	80 83       	st	Z, r24
 20e:	83 b1       	in	r24, 0x03	; 3
 210:	84 70       	andi	r24, 0x04	; 4
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	26 b1       	in	r18, 0x06	; 6
 222:	22 70       	andi	r18, 0x02	; 2
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	35 95       	asr	r19
 228:	27 95       	ror	r18
 22a:	82 2b       	or	r24, r18
 22c:	93 2b       	or	r25, r19
 22e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 232:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 236:	08 95       	ret

00000238 <_Z13updateEncoderv>:
 238:	83 b1       	in	r24, 0x03	; 3
 23a:	84 70       	andi	r24, 0x04	; 4
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	26 b1       	in	r18, 0x06	; 6
 248:	22 70       	andi	r18, 0x02	; 2
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	35 95       	asr	r19
 24e:	27 95       	ror	r18
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	82 2b       	or	r24, r18
 256:	93 2b       	or	r25, r19
 258:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 25c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	28 2b       	or	r18, r24
 26a:	39 2b       	or	r19, r25
 26c:	2d 30       	cpi	r18, 0x0D	; 13
 26e:	31 05       	cpc	r19, r1
 270:	49 f0       	breq	.+18     	; 0x284 <_Z13updateEncoderv+0x4c>
 272:	24 30       	cpi	r18, 0x04	; 4
 274:	31 05       	cpc	r19, r1
 276:	31 f0       	breq	.+12     	; 0x284 <_Z13updateEncoderv+0x4c>
 278:	22 30       	cpi	r18, 0x02	; 2
 27a:	31 05       	cpc	r19, r1
 27c:	19 f0       	breq	.+6      	; 0x284 <_Z13updateEncoderv+0x4c>
 27e:	2b 30       	cpi	r18, 0x0B	; 11
 280:	31 05       	cpc	r19, r1
 282:	51 f4       	brne	.+20     	; 0x298 <_Z13updateEncoderv+0x60>
 284:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <encoderPosition>
 288:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <encoderPosition+0x1>
 28c:	4f 5f       	subi	r20, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <encoderPosition+0x1>
 294:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <encoderPosition>
 298:	2e 30       	cpi	r18, 0x0E	; 14
 29a:	31 05       	cpc	r19, r1
 29c:	49 f0       	breq	.+18     	; 0x2b0 <_Z13updateEncoderv+0x78>
 29e:	27 30       	cpi	r18, 0x07	; 7
 2a0:	31 05       	cpc	r19, r1
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <_Z13updateEncoderv+0x78>
 2a4:	21 30       	cpi	r18, 0x01	; 1
 2a6:	31 05       	cpc	r19, r1
 2a8:	19 f0       	breq	.+6      	; 0x2b0 <_Z13updateEncoderv+0x78>
 2aa:	28 30       	cpi	r18, 0x08	; 8
 2ac:	31 05       	cpc	r19, r1
 2ae:	51 f4       	brne	.+20     	; 0x2c4 <_Z13updateEncoderv+0x8c>
 2b0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <encoderPosition>
 2b4:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <encoderPosition+0x1>
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	31 09       	sbc	r19, r1
 2bc:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <encoderPosition+0x1>
 2c0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <encoderPosition>
 2c4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 2c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 2cc:	08 95       	ret

000002ce <__vector_4>:
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
 2f0:	0e 94 1c 01 	call	0x238	; 0x238 <_Z13updateEncoderv>
 2f4:	8a ea       	ldi	r24, 0xAA	; 170
 2f6:	0e 94 df 01 	call	0x3be	; 0x3be <_Z12transmitByteh>
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <_Z15encoderGetTicksv>:
}

int encoderGetTicks() {
    return encoderPosition;
 31c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <encoderPosition>
 320:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <encoderPosition+0x1>
}
 324:	08 95       	ret

00000326 <_Z9mainSetupv>:
#include "Encoder.h"
#include "SD_Card.h"

void mainSetup() {
    // Initialize UART communication
    UARTInit(); // Baud rate initialized at 19200
 326:	0e 94 c1 01 	call	0x382	; 0x382 <_Z8UARTInitv>
    /* TODO: SPI initialization */
    
    // Initialize libraries
    displayInit();
 32a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z11displayInitv>
    // sdCardInit();
    buttonInit();
 32e:	0e 94 a2 00 	call	0x144	; 0x144 <_Z10buttonInitv>
    encoderInit();
 332:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z11encoderInitv>
    
    // Enable global interrupts (for button and encoder)
    sei();
 336:	78 94       	sei
 338:	08 95       	ret

0000033a <_Z8mainLoopv>:
}

void mainLoop() {
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
    // Print the encoder position
    static int lastPosition = 0;
    int currentPosition = encoderGetTicks();
 33e:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z15encoderGetTicksv>
 342:	ec 01       	movw	r28, r24
    if (lastPosition != currentPosition) {
 344:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_ZZ8mainLoopvE12lastPosition>
 348:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZZ8mainLoopvE12lastPosition+0x1>
 34c:	c8 17       	cp	r28, r24
 34e:	d9 07       	cpc	r29, r25
 350:	39 f0       	breq	.+14     	; 0x360 <_Z8mainLoopv+0x26>
        transmitByte(currentPosition);
 352:	8c 2f       	mov	r24, r28
 354:	0e 94 df 01 	call	0x3be	; 0x3be <_Z12transmitByteh>
        lastPosition = currentPosition;
 358:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <_ZZ8mainLoopvE12lastPosition+0x1>
 35c:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <_ZZ8mainLoopvE12lastPosition>
 360:	2f ef       	ldi	r18, 0xFF	; 255
 362:	81 ee       	ldi	r24, 0xE1	; 225
 364:	94 e0       	ldi	r25, 0x04	; 4
 366:	21 50       	subi	r18, 0x01	; 1
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	e1 f7       	brne	.-8      	; 0x366 <_Z8mainLoopv+0x2c>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <_Z8mainLoopv+0x36>
 370:	00 00       	nop
    }

    // Add a delay to prevent spamming
    _delay_ms(100);
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <main>:

// Do not touch
int main(void) {
    mainSetup();
 378:	0e 94 93 01 	call	0x326	; 0x326 <_Z9mainSetupv>
    while (1) {
        mainLoop();
 37c:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z8mainLoopv>
 380:	fd cf       	rjmp	.-6      	; 0x37c <main+0x4>

00000382 <_Z8UARTInitv>:
void UARTInit(void) {
	// see table 24.9 of datasheet
	// baud rate set to 19200 (required by TM1652)
	// double speed mode abd F_CPU = 16MHz
	
	UBRR0H = 0;
 382:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67; // 103
 386:	87 e6       	ldi	r24, 0x67	; 103
 388:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0A |= (1 << U2X0);						//Enable double speed mode ; UCSR0A &= ~(1 << U2X0) to disable
 38c:	e0 ec       	ldi	r30, 0xC0	; 192
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	82 60       	ori	r24, 0x02	; 2
 394:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);		//Enable USART transmitter/receiver 
 396:	e1 ec       	ldi	r30, 0xC1	; 193
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	88 61       	ori	r24, 0x18	; 24
 39e:	80 83       	st	Z, r24
	
	// Bit structure :
	// start bit handled automatically
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	//8 data bits
 3a0:	e2 ec       	ldi	r30, 0xC2	; 194
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	86 60       	ori	r24, 0x06	; 6
 3a8:	80 83       	st	Z, r24

	UCSR0C |= (1 << UPM01)  | (1 << UPM00);  // Odd parity
 3aa:	80 81       	ld	r24, Z
 3ac:	80 63       	ori	r24, 0x30	; 48
 3ae:	80 83       	st	Z, r24

	UCSR0C |= (1 << UPM01);  // Even
 3b0:	80 81       	ld	r24, Z
 3b2:	80 62       	ori	r24, 0x20	; 32
 3b4:	80 83       	st	Z, r24
	UCSR0C |= (1 << UPM01)  | (1 << UPM00);  // Even parity
 3b6:	80 81       	ld	r24, Z
 3b8:	80 63       	ori	r24, 0x30	; 48
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <_Z12transmitByteh>:
	//UCSR0C &= ~(1 << USBS0);  // 1 stop bit (clear USBS0)
	
}

void transmitByte(uint8_t data) {
	loop_until_bit_is_set(UCSR0A, UDRE0); /* Attendre que le buffer de transmission soit vide */
 3be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3c2:	95 ff       	sbrs	r25, 5
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <_Z12transmitByteh>
	UDR0 = data;                      /* envoyer la donnée */
 3c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3ca:	08 95       	ret

000003cc <_Z16USART0_SendBytesPhh>:
}

void USART0_SendBytes(uint8_t *data, uint8_t length) {
 3cc:	dc 01       	movw	r26, r24
	for (uint16_t i = 0; i < length; i++) {
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	46 2f       	mov	r20, r22
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	24 17       	cp	r18, r20
 3d8:	35 07       	cpc	r19, r21
 3da:	68 f4       	brcc	.+26     	; 0x3f6 <_Z16USART0_SendBytesPhh+0x2a>
		// Attendre que le buffer de transmission soit vide 
		while (!(UCSR0A & (1 << UDRE0)));
 3dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3e0:	95 ff       	sbrs	r25, 5
 3e2:	fc cf       	rjmp	.-8      	; 0x3dc <_Z16USART0_SendBytesPhh+0x10>
		
		// Envoyer le byte
		UDR0 = data[i];
 3e4:	fd 01       	movw	r30, r26
 3e6:	e2 0f       	add	r30, r18
 3e8:	f3 1f       	adc	r31, r19
 3ea:	90 81       	ld	r25, Z
 3ec:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	loop_until_bit_is_set(UCSR0A, UDRE0); /* Attendre que le buffer de transmission soit vide */
	UDR0 = data;                      /* envoyer la donnée */
}

void USART0_SendBytes(uint8_t *data, uint8_t length) {
	for (uint16_t i = 0; i < length; i++) {
 3f0:	2f 5f       	subi	r18, 0xFF	; 255
 3f2:	3f 4f       	sbci	r19, 0xFF	; 255
 3f4:	ee cf       	rjmp	.-36     	; 0x3d2 <_Z16USART0_SendBytesPhh+0x6>
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
